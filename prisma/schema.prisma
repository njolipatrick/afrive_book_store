generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model books {
  id          Int          @id @default(autoincrement())
  title       String?      @unique @db.VarChar(100)
  author      String?      @db.VarChar(50)
  image       String?      @db.VarChar(255)
  description String?      @db.VarChar(1500)
  price       Float?
  status      String?      @db.VarChar(255)
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  updated_at  DateTime?    @default(now()) @db.Timestamp(6)
  carts       carts[]
  categories  categories[]
  ebooks      ebooks[]
  favorites   favorites[]
  reviews     reviews[]
}

model carts {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  book_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  books      books?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model categories {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(100)
  book_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  books      books?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ebooks {
  id         Int       @id @default(autoincrement())
  status     Boolean?
  format     String?   @db.VarChar(50)
  book_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  books      books?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model favorites {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  book_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  books      books?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model migrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model orders {
  id                      Int               @id @default(autoincrement())
  user_id                 Int?
  txn_ref                 String            @db.VarChar(255)
  total_order_amount      String            @db.VarChar(255)
  status                  String            @db.VarChar(255)
  completed               Boolean?          @default(false)
  estimated_delivery_date String            @db.VarChar(255)
  currency                String            @db.VarChar(255)
  checkout_url            String            @db.VarChar(255)
  book                    Json?             @db.Json
  created_at              DateTime?         @default(now()) @db.Timestamp(6)
  updated_at              DateTime?         @default(now()) @db.Timestamp(6)
  users                   users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders_delivery         orders_delivery[]
}

model orders_delivery {
  id               Int       @id @default(autoincrement())
  order_id         Int?
  phone            Int?
  delivery_address String?   @db.VarChar(255)
  date_delivered   DateTime? @db.Timestamp(6)
  is_delivered     Boolean
  download_link    String?   @db.VarChar(255)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  orders           orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reviews {
  id         Int       @id @default(autoincrement())
  comment    String?   @db.VarChar(50)
  rate       Int?
  user_id    Int?
  book_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  books      books?    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                 Int         @id @default(autoincrement())
  firstname          String?     @db.VarChar(100)
  lastname           String?     @db.VarChar(100)
  username           String?     @unique @db.VarChar(100)
  email              String?     @unique @db.VarChar(50)
  isverified         Boolean?
  role               String?     @db.VarChar(10)
  verification_token String?     @db.VarChar(255)
  password           String?     @db.VarChar(255)
  created_at         DateTime?   @default(now()) @db.Timestamp(6)
  updated_at         DateTime?   @default(now()) @db.Timestamp(6)
  carts              carts[]
  favorites          favorites[]
  orders             orders[]
  reviews            reviews[]
}
